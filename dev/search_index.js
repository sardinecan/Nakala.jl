var documenterSearchIndex = {"docs":
[{"location":"modules/search/#Search","page":"Search","title":"Search","text":"","category":"section"},{"location":"modules/search/","page":"Search","title":"Search","text":"Le module Nakala.Search correspond au end-point Nakala search. Il est dédié à la recherche de données et de collections sur Nakala.","category":"page"},{"location":"modules/search/","page":"Search","title":"Search","text":"Modules = [Nakala.Search]","category":"page"},{"location":"modules/search/#Nakala.Search.search-Tuple{Array}","page":"Search","title":"Nakala.Search.search","text":"search(params::Array; apitest::Bool=false)\n\nRecherche des données Nakala et retourne un dictionnaire. La réponse du serveur correspond à la valeur de la clé body.\n\nexemple\n\njulia> Nakala.Search.search([:q=>\"édition\", :fq => \"\"], apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"totalResults\"=>40, \"datas\"=>Any[Dict{String, Any}(\"collectionsIds\"=>Any[\"10.34847/nkl.6d3ei1wy\"], \"stat…\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/search/#Nakala.Search.search_authors-Tuple{Array}","page":"Search","title":"Nakala.Search.search_authors","text":"search_authors(params::Array; apitest::Bool=false)\n\nRecherche des auteurs associés aux données de Nakala et retourne un dictionnaire. La réponse du serveur correspond à la valeur de la clé body.\n\nexemple\n\njulia> Nakala.Search.search_authors([:q=>\"Hugo\"], apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Any[]\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/users/#Users","page":"Users","title":"Users","text":"","category":"section"},{"location":"modules/users/","page":"Users","title":"Users","text":"Modules = [Nakala.Users]","category":"page"},{"location":"modules/users/#Nakala.Users.getusers_collections_createdyears-Tuple{Array, Dict}","page":"Users","title":"Nakala.Users.getusers_collections_createdyears","text":"getusers_collections_createdyears(params::Array, headers::Dict; apitest::Bool=false)\n\nRécupération des différentes années de création des collections accessibles par un utilisateur.\n\nexemple\n\n\n\n\n\n\n\n","category":"method"},{"location":"modules/users/#Nakala.Users.getusers_collections_statuses-Tuple{Array, Dict}","page":"Users","title":"Nakala.Users.getusers_collections_statuses","text":"getusers_collections_statuses(params::Array, headers::Dict; apitest::Bool=false)\n\nRécupération des différents statuts des collections accessibles par un utilisateur.\n\nexemple\n\n\n\n\n\n\n\n","category":"method"},{"location":"modules/users/#Nakala.Users.getusers_datas_createdyears-Tuple{Array, Dict}","page":"Users","title":"Nakala.Users.getusers_datas_createdyears","text":"getusers_datas_createdyears(params::Array, headers::Dict; apitest::Bool=false)\n\nRécupération des différentes années de création des données accessibles par un utilisateur.\n\nexemple\n\n\n\n\n\n\n\n","category":"method"},{"location":"modules/users/#Nakala.Users.getusers_datas_datatypes-Tuple{Array, Dict}","page":"Users","title":"Nakala.Users.getusers_datas_datatypes","text":"getusers_datas_datatypes(params::Array, headers::Dict; apitest::Bool=false)\n\nRécupération des types des données accessibles par un utilisateur.\n\nexemple\n\n\n\n\n\n\n\n","category":"method"},{"location":"modules/users/#Nakala.Users.getusers_datas_statuses-Tuple{Array, Dict}","page":"Users","title":"Nakala.Users.getusers_datas_statuses","text":"getusers_datas_statuses(params::Array, headers::Dict; apitest::Bool=false)\n\nRécupération des différents statuts des données accessibles par un utilisateur.\n\nexemple\n\n\n\n\n\n\n\n","category":"method"},{"location":"modules/users/#Nakala.Users.getusers_groups-Tuple{String, Array, Dict}","page":"Users","title":"Nakala.Users.getusers_groups","text":"getusers_groups(scope::String, params::Array, headers::Dict; apitest::Bool=false)\n\nRécupération des groupes d'un utilisateur.\n\nexemple\n\n\n\n\n\n\n\n","category":"method"},{"location":"modules/users/#Nakala.Users.getusers_me-Tuple{Dict}","page":"Users","title":"Nakala.Users.getusers_me","text":"getusers_me(headers::Dict; apitest::Bool=false)\n\nRécupération des informations sur l'utilisateur courant.\n\nexemple\n\n\n\n\n\n\n\n","category":"method"},{"location":"modules/users/#Nakala.Users.postusers_collections-Tuple{String, Dict, Dict}","page":"Users","title":"Nakala.Users.postusers_collections","text":"postusers_collections(scope::String, headers::Dict, body::Dict; apitest::Bool=false)\n\nRécupération des collections accessibles par un utilisateur.\n\nexemple\n\n\n\n\n\n\n\n","category":"method"},{"location":"modules/users/#Nakala.Users.postusers_datas-Tuple{String, Dict, Dict}","page":"Users","title":"Nakala.Users.postusers_datas","text":"postusers_datas(scope::String, headers::Dict, body::Dict; apitest::Bool=false)\n\nRécupération des données accessibles par un utilisateur.\n\nexemple\n\n\n\n\n\n\n\n","category":"method"},{"location":"modules/users/#Nakala.Users.putusers_me-Tuple{Dict, Dict}","page":"Users","title":"Nakala.Users.putusers_me","text":"putusers_me(headers::Dict, body::Dict; apitest::Bool=false)\n\nMise à jour des informations sur l'utilisateur courant.\n\nexemple\n\n\n\n\n\n\n\n","category":"method"},{"location":"modules/users/#Nakala.Users.putusers_me_apikey-Tuple{Dict}","page":"Users","title":"Nakala.Users.putusers_me_apikey","text":"putusers_me_apikey(headers::Dict; apitest::Bool=false)\n\nMise à jour de la clé d'API de l'utilisateur courant.\n\nexemple\n\n\n\n\n\n\n\n","category":"method"},{"location":"modules/collections/#Collections","page":"Collections","title":"Collections","text":"","category":"section"},{"location":"modules/collections/","page":"Collections","title":"Collections","text":"Le module Nakala.Collections correspond au end-point Nakala collections. Il est dédié à la gestion des collections.","category":"page"},{"location":"modules/collections/","page":"Collections","title":"Collections","text":"Modules = [Nakala.Collections]","category":"page"},{"location":"modules/collections/#Nakala.Collections.deletecollections-Tuple{String, Dict}","page":"Collections","title":"Nakala.Collections.deletecollections","text":"deletecollections(identifier::String, headers::Dict; apitest::Bool=false)\n\nSupprime la collection désignée par ìdentifier.\n\nexemple\n\njulia> Nakala.Collections.deletecollections(identifier, headers, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => \"\"\n  \"status\"    => 204\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/collections/#Nakala.Collections.deletecollections_datas-Tuple{String, Dict, Array}","page":"Collections","title":"Nakala.Collections.deletecollections_datas","text":"deletecollections_datas(identifier::String, headers::Dict, body::Array; apitest::Bool=false)\n\nSupprime une liste de données de la collection désignée par identifier.\n\nexemple\n\njulia> body = [ data_identifier ]\n1-element Vector{String}:\n  \"10.34847/nkl.bcdblt35\"\n\njulia> Nakala.Collections.deletecollections_datas(identifier, headers, body, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"message\"=>\"Data removed form the collection\", \"code\"=>200)\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/collections/#Nakala.Collections.deletecollections_metadatas-Tuple{String, Dict, Dict}","page":"Collections","title":"Nakala.Collections.deletecollections_metadatas","text":"deletecollections_metadatas(identifier::String, headers::Dict, body::Dict; apitest::Bool=false)\n\nSupprime des métadonnées de la collection désignée par identifier.\n\nexemple\n\njulia> body = Dict(:value => \"My collection\", :propertyUri => \"http://nakala.fr/terms#title\", :lang => \"en\", :typeUri => \"http://www.w3.org/2001/XMLSchema#string\")\nDict{Symbol, String} with 4 entries:\n  :value       => \"My collection\"\n  :propertyUri => \"http://nakala.fr/terms#title\"\n  :lang        => \"en\"\n  :typeUri     => \"http://www.w3.org/2001/XMLSchema#string\"\n\njulia> Nakala.Collections.deletecollections_metadatas(identifier, headers, body, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => \"\"\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/collections/#Nakala.Collections.deletecollections_rights-Tuple{String, Dict, Dict}","page":"Collections","title":"Nakala.Collections.deletecollections_rights","text":"deletecollections_rights(identifier::String, headers::Dict, body::Dict; apitest::Bool=false)\n\nSupprime les droits d'un utilisateur ou d'un groupe d'utilisateurs sur la collection désignée par identifier.\n\nexemple\n\njulia> body = Dict( :id => \"c7e9bb15-6b4e-4e09-b234-ae7b13ac1f321\", :role => \"ROLE_READER\" )\n1-element Vector{Dict{Symbol, String}}:\n Dict(:id => \"c7e9bb15-6b4e-4e09-b234-ae7b13ac1f321\", :role => \"ROLE_READER\")\n\njulia> Nakala.Collections.deletecollections_rights(identifier, headers, body, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"message\"=>\"1 right deleted\", \"code\"=>200)\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/collections/#Nakala.Collections.getcollections-Tuple{String, Dict}","page":"Collections","title":"Nakala.Collections.getcollections","text":"getcollections(identifier::String, headers::Dict; apitest::Bool=false)\n\nRécupère les informations de la collection désignée par identifier.\n\nexemple\n\njulia> getcollections(identifier, headers, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"haveAccessibleData\"=>false, \"websitePrefix\"=>\"\", \"isDepositor\"=>true, \"isOwner\"=>true, \"depositor\"=>Dic…\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/collections/#Nakala.Collections.getcollections_datas-Tuple{String, Array, Dict}","page":"Collections","title":"Nakala.Collections.getcollections_datas","text":"getcollections_datas(identifier::String, params::Array, headers::Dict; apitest::Bool=false)\n\nRécupère la liste paginée des données contenues dans la collection désignée par ìdentifier.\n\nexemple\n\njulia> params = [ :page => 1, :limit => 10 ]\n\njulia> Nakala.Collections.getcollections_datas(identifier, params, headers, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"currentPage\"=>1, \"lastPage\"=>1, \"total\"=>1, \"data\"=>Any[Dict{String, Any}(\"uri\"=>\"https://doi.org/10.34847/nkl.bcdblt35\", \"status\"=…\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/collections/#Nakala.Collections.getcollections_metadatas-Tuple{String, Dict}","page":"Collections","title":"Nakala.Collections.getcollections_metadatas","text":"getcollections_metadatas(identifier::String, headers::Dict; apitest::Bool=false)\n\nRécupère les métadonnées de la collection désignée par identifier.\n\nexemple\n\njulia> Nakala.Collections.getcollections_metadatas(identifier, headers, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Any[Dict{String, Any}(\"typeUri\"=>nothing, \"propertyUri\"=>\"http://nakala.fr/terms#title\", \"lang\"=>\"fr\", \"value\"=>\"Ma collection\")]\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/collections/#Nakala.Collections.getcollections_rights-Tuple{String, Dict}","page":"Collections","title":"Nakala.Collections.getcollections_rights","text":"getcollections_rights(identifier::String, headers::Dict; apitest::Bool=false)\n\nRécupère les utilisateurs et les groupes ayant des droits sur la collection désignée par identifier.\n\nexemple\n\njulia> Nakala.Collections.getcollections_rights(identifier, headers, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Any[Dict{String, Any}(\"role\"=>\"ROLE_DEPOSITOR\", \"name\"=>\"Test Nakala\", \"photo\"=>\"http://mynakala.photo\", \"id\"=>\"26cef362-5bef-11eb-99d1-5254000a365d\",…\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/collections/#Nakala.Collections.getcollections_status-Tuple{String, Dict}","page":"Collections","title":"Nakala.Collections.getcollections_status","text":"getcollections_status(identifier::String, headers::Dict; apitest::Bool=false)\n\nRécupère le statut de la collection désignée par identifier.\n\nexemple\n\njulia> Nakala.Collections.getcollections_status(identifier, headers)\nDict{String, Any} with 3 entries:\n  \"body\"      => \"private\"\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/collections/#Nakala.Collections.postcollections-Tuple{Dict, Dict}","page":"Collections","title":"Nakala.Collections.postcollections","text":"postcollections(headers::Dict, body::Dict; apitest::Bool=false)\n\nCrée une nouvelle collection.\n\nexemple\n\njulia> headers = Dict(\n  \"X-API-KEY\" => apikey,\n  \"Content-Type\" => \"application/json\"\n)\n\njulia> body = Dict(\n  :status => \"public\",\n  :metas => [Dict(:value => \"Collection\", :propertyUri => \"http://nakala.fr/terms#title\", :lang => \"fr\", :typeUri => \"http://www.w3.org/2001/XMLSchema#string\"),],\n  :datas => [],\n  :rights => []\n)\n\njulia> Nakala.Collections.postcollections(headers, body, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"message\"=>\"Collection created\", \"payload\"=>Dict{String, Any}(\"id\"=>\"10.34847/nkl.e73a86ab\"), \"code\"=>201)\n  \"status\"    => 201\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/collections/#Nakala.Collections.postcollections_datas-Tuple{String, Dict, Array}","page":"Collections","title":"Nakala.Collections.postcollections_datas","text":"postcollections_datas(identifier::String, headers::Dict, body::Array; apitest::Bool=false)\n\nAjoute une liste de données à la collection désignée par identifier.\n\nexemple\n\njulia> body = [ data_identifier ]\n1-element Vector{String}:\n  \"10.34847/nkl.bcdblt35\"\n\njulia> Nakala.Collections.postcollections_datas(identifier, headers, body, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"message\"=>\"Data added in the collection\", \"code\"=>201)\n  \"status\"    => 201\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/collections/#Nakala.Collections.postcollections_metadatas-Tuple{String, Dict, Dict}","page":"Collections","title":"Nakala.Collections.postcollections_metadatas","text":"postcollections_metadatas(identifier::String, headers::Dict, body::Dict; apitest::Bool=false)\n\nAjoute nouvelle métadonnée à la collection désignée par identifier.\n\nexemple\n\njulia> body = Dict(:value => \"My collection\", :propertyUri => \"http://nakala.fr/terms#title\", :lang => \"en\", :typeUri => \"http://www.w3.org/2001/XMLSchema#string\")\nDict{Symbol, String} with 4 entries:\n  :value       => \"My collection\"\n  :propertyUri => \"http://nakala.fr/terms#title\"\n  :lang        => \"en\"\n  :typeUri     => \"http://www.w3.org/2001/XMLSchema#string\"\n\njulia> Nakala.Collections.postcollections_metadatas(identifier, headers, body, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"message\"=>\"1\", \"code\"=>201)\n  \"status\"    => 201\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/collections/#Nakala.Collections.postcollections_rights-Tuple{String, Dict, Array}","page":"Collections","title":"Nakala.Collections.postcollections_rights","text":"postcollections_rights(identifier::String, headers::Dict, body::Array; apitest::Bool=false)\n\nAjoute des droits sur la collection désignée par identifier.\n\nexemple\n\njulia> body = [ Dict( :id => \"c7e9bb15-6b4e-4e09-b234-ae7b13ac1234\", :role => \"ROLE_READER\" ) ]\n1-element Vector{Dict{Symbol, String}}:\n Dict(:id => \"c7e9bb15-6b4e-4e09-b234-ae7b13ac1f3b\", :role => \"ROLE_READER\")\n\njulia> Nakala.Collections.postcollections_rights(identifier, headers, body, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"message\"=>\"1 right added\", \"code\"=>200)\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/collections/#Nakala.Collections.putcollections-Tuple{String, Dict, Dict}","page":"Collections","title":"Nakala.Collections.putcollections","text":"putcollections(identifier::String, headers::Dict, body::Dict; apitest::Bool=false)\n\nModifie les informations de la collection désignée par `ìdentifier.\n\nexemple\n\njulia> body = Dict(\n  :status => \"public\",\n  :metas => [Dict(:value => \"Test de postcollections\", :propertyUri => \"http://nakala.fr/terms#title\", :lang => \"fr\", :typeUri => \"http://www.w3.org/2001/XMLSchema#string\"),],\n  :datas => [],\n  :rights => []\n)\nDict{Symbol, Any} with 4 entries:\n  :status => \"public\"\n  :datas  => Any[]\n  :rights => Any[]\n  :metas  => [Dict(:value=>\"Test de putcollections\", :propertyUri=>\"http://nakala.fr/terms#title\", :lang=>\"en\", :typeUri=>\"http://www.w3.org/2001/XMLSchema#string\")]\n\njulia> Nakala.Collections.putcollections(identifier, headers, body, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"message\"=>\"Collection created\", \"payload\"=>Dict{String, Any}(\"id\"=>\"10.34847/nkl.542485b0\"), \"code\"=>201)\n  \"status\"    => 201\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/collections/#Nakala.Collections.putcollections_status-Tuple{String, String, Dict}","page":"Collections","title":"Nakala.Collections.putcollections_status","text":"putcollections_status(identifier::String, status::String, headers::Dict; apitest::Bool=false)\n\nModifie le statut de la collection désignée par identifier.\n\nexemple\n\njulia> Nakala.Collections.putcollections_status(identifier, \"public\", headers)\n\n\n\n\n\n","category":"method"},{"location":"modules/default/#Default","page":"Default","title":"Default","text":"","category":"section"},{"location":"modules/default/","page":"Default","title":"Default","text":"Le module Nakala.Default correspond au end-point Nakala default. Il permet de vérifier l'état des ressources dans les services ElasticSearch et Datacite.","category":"page"},{"location":"modules/default/","page":"Default","title":"Default","text":"Modules = [Nakala.Default]","category":"page"},{"location":"modules/default/#Nakala.Default.getresourceprocessing-Tuple{String, Dict}","page":"Default","title":"Nakala.Default.getresourceprocessing","text":"getresourceprocessing(identifier::String, headers::Dict, apitest::Bool=false)\n\nÉtat d'une ressource désignée par identifier dans ElasticSearch et Datacite.\n\nexemple\n\njulia> Nakala.getresourceprocessing(identifier, headers, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Any[Dict{String, Any}(\"action\"=>\"update\", \"status\"=>\"start\", \"service\"=>\"datacite\", \"datestamp\"=>\"2024-09-11T19:34:10+02:00\"), Dict{String, Any}(\"acti…\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/groups/#Groups","page":"Groups","title":"Groups","text":"","category":"section"},{"location":"modules/groups/","page":"Groups","title":"Groups","text":"Modules = [Nakala.Groups]","category":"page"},{"location":"modules/groups/#Nakala.Groups.deletegroups-Tuple{String, Dict}","page":"Groups","title":"Nakala.Groups.deletegroups","text":"deletegroups(identifier::String, headers::Dict; apitest::Bool=false)\n\nexemple\n\n\n\n\n\n\n\n","category":"method"},{"location":"modules/groups/#Nakala.Groups.getgroups-Tuple{String, Dict}","page":"Groups","title":"Nakala.Groups.getgroups","text":"getgroups(identifier::String, headers::Dict; apitest::Bool=false)\n\nexemple\n\n\n\n\n\n\n\n","category":"method"},{"location":"modules/groups/#Nakala.Groups.getgroups_search-Tuple{Array, Dict}","page":"Groups","title":"Nakala.Groups.getgroups_search","text":"getgroups_search(params::Array, headers::Dict; apitest::Bool=false)\n\nexemple\n\n\n\n\n\n\n\n","category":"method"},{"location":"modules/groups/#Nakala.Groups.postgroups-Tuple{Dict, Dict}","page":"Groups","title":"Nakala.Groups.postgroups","text":"postgroups(headers::Dict, body::Dict; apitest::Bool=false)\n\nexemple\n\n\n\n\n\n\n\n","category":"method"},{"location":"modules/groups/#Nakala.Groups.putgroups-Tuple{String, Dict, Dict}","page":"Groups","title":"Nakala.Groups.putgroups","text":"putgroups(identifier::String, headers::Dict, body::Dict; apitest::Bool=false)\n\nexemple\n\n\n\n\n\n\n\n","category":"method"},{"location":"#Nakala.jl","page":"Nakala.jl","title":"Nakala.jl","text":"","category":"section"},{"location":"","page":"Nakala.jl","title":"Nakala.jl","text":"Le package Nakala.jl est une bibliothèque Julia conçue pour interagir avec l'API de Nakala, une plateforme dédiée à la gestion, au stockage et au partage des données de la recherche en sciences humaines et sociales.","category":"page"},{"location":"","page":"Nakala.jl","title":"Nakala.jl","text":"Nakala.jl facilite l'accès à l'API pour déposer, publier, gérer et télécharger des jeux de données. Ce package est particulièrement utile pour manipuler des ensembles de données volumineux. Il s'adresse principalement aux ingénieurs et chercheurs disposant d'un accès à Nakala, et souhaitant partager leurs données dans le respect des principes FAIR ","category":"page"},{"location":"","page":"Nakala.jl","title":"Nakala.jl","text":"Nakala.jl est construit autour de 7 modules correspondant aux end-points de l'API :","category":"page"},{"location":"","page":"Nakala.jl","title":"Nakala.jl","text":"Search\nDatas\nCollections\nUsers\nGroups\nVocabularies\nDefault","category":"page"},{"location":"","page":"Nakala.jl","title":"Nakala.jl","text":"Pour exécuter les requêtes vous devez disposer d'une clé API Nakala, ou utiliser une clé publique avec l'API Test de Nakala. La clé doit être indiquée dans les headers, par exemple : ","category":"page"},{"location":"","page":"Nakala.jl","title":"Nakala.jl","text":"headers = Dict(\n    \"X-API-KEY\" => apikey,\n    :accept => \"application/json\"\n)","category":"page"},{"location":"","page":"Nakala.jl","title":"Nakala.jl","text":"La très grande majorité des fonctions de ce package dispose d'un keyword argument apitest. Par défaut, les requêtes sont envoyées sur l'API de production. Cependant, si vous ajoutez l'argument apitest=true à votre fonction, la requête sera envoyée à l'API Test.","category":"page"},{"location":"","page":"Nakala.jl","title":"Nakala.jl","text":"Les fonctions retournent un dictionnaire Julia :","category":"page"},{"location":"","page":"Nakala.jl","title":"Nakala.jl","text":"succès ou erreur HTTP","category":"page"},{"location":"","page":"Nakala.jl","title":"Nakala.jl","text":"Dict(\n    \"isSuccess\" => true|false,\n    \"status\" => \"String\", # code http\n    \"body\" => \"String\" # réponse du serveur et message d'erreur\n)","category":"page"},{"location":"","page":"Nakala.jl","title":"Nakala.jl","text":"autre erreur","category":"page"},{"location":"","page":"Nakala.jl","title":"Nakala.jl","text":"Dict(\n    \"isSuccess\" => false,\n    \"message\" => \"An unexpected error occurred: $(message)\"\n)","category":"page"},{"location":"","page":"Nakala.jl","title":"Nakala.jl","text":"La gestion des erreurs repose sur l'utilisation de try/catch afin de traiter les exceptions. Les erreurs HTTP (renvoyant un code et un message explicatif) sont distinguées des autres types d'erreurs, comme les échecs de connexion par exemple. Cette approche autorise une gestion efficace et claire des erreurs, facilitant ainsi la résolution des problèmes.","category":"page"},{"location":"","page":"Nakala.jl","title":"Nakala.jl","text":"<!– @todo      prise en charge XML –>","category":"page"},{"location":"#Liens-et-lectures-utiles","page":"Nakala.jl","title":"Liens et lectures utiles","text":"","category":"section"},{"location":"","page":"Nakala.jl","title":"Nakala.jl","text":"La documentation Nakala en ligne ;\ninterface web et API de production ;\ninterface web et API de test ;\nNakalaPycon, une librairie Python pour interagir avec l’API Nakala ;\nNakalaPyConnect, dépôt facilitant l'appropriation de Nakala et de son API ; \nNotebook Api Nakala, une présentation de l'API de NAKALA sous forme d'un notebook Jupyter.","category":"page"},{"location":"modules/datas/#Datas","page":"Datas","title":"Datas","text":"","category":"section"},{"location":"modules/datas/","page":"Datas","title":"Datas","text":"Le module Nakala.Datas correspond au end-point Nakala datas. Il est dédié à la gestion des données.","category":"page"},{"location":"modules/datas/","page":"Datas","title":"Datas","text":"Modules = [Nakala.Datas]","category":"page"},{"location":"modules/datas/#Nakala.Datas.deletedatas-Tuple{String, Dict}","page":"Datas","title":"Nakala.Datas.deletedatas","text":"deletedatas(identifier::String, headers::Dict; apitest::Bool=false)\n\nSupprime la donnée désignée par identifier.\n\nexemple\n\njulia> Nakala.Datas.deletedatas(identifier, headers, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => \"\"\n  \"status\"    => 204\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.deletedatas_collections-Tuple{String, Dict, Array}","page":"Datas","title":"Nakala.Datas.deletedatas_collections","text":"deletedatas_collections(identifier::String, headers::Dict, body::Array; apitest::Bool=false)\n\nSupprime la donnée désignée par identifier d'un ensemble de collections.\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.deletedatas_files-Tuple{String, String, Dict}","page":"Datas","title":"Nakala.Datas.deletedatas_files","text":"deletedatas_files(identifier::String, fileIdentifier::String, headers::Dict; apitest::Bool=false)\n\nSupprime le fichier fileIdentifier de la donnée Nakala désignée par identifier.\n\nexemple\n\njulia> Nakala.Datas.deletedatas_files(\"10.34847/nkl.b0ee\", \"a0b65939670bc2c01\", headers, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => \"\"\n  \"status\"    => 204\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.deletedatas_metadatas-Tuple{String, Dict, Dict}","page":"Datas","title":"Nakala.Datas.deletedatas_metadatas","text":"deletedatas_metadatas(identifier::String, headers::Dict, body::Dict; apitest::Bool=false)\n\nSupprime des métadonnées de la donnée désignée par identifier.\n\nexemple\n\njulia> body = Dict( :propertyUri => \"http://nakala.fr/terms#title\", :lang => \"en\" ) # on désigne ici le titre anglais de la donnée\nDict{Symbol, String} with 2 entries:\n  :propertyUri => \"http://nakala.fr/terms#title\"\n  :lang        => \"en\"\n\njulia> Nakala.Datas.deletedatas_metadatas(identifier, headers, body, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"message\"=>\"1 metadata deleted\", \"code\"=>200)\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.deletedatas_relations-Tuple{String, Dict, Dict}","page":"Datas","title":"Nakala.Datas.deletedatas_relations","text":"deletedatas_relations(identifier::String, headers::Dict, body::Dict; apitest::Bool=false)\n\nSupprime des relations attachées à la donnée désignée par identifier.\n\nexemple\n\njulia> body = Dict(:type => \"Cites\", :repository => \"hal\", :target => \"hal-02464318v1\", :comment => \"relation test\")\nDict{Symbol, String} with 4 entries:\n  :type       => \"Cites\"\n  :repository => \"hal\"\n  :target     => \"hal-02464318v1\"\n  :comment    => \"relation test\"\n\njulia> Nakala.Datas.deletedatas_relations(identifier, headers, body, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"message\"=>\"1 relation deleted\", \"code\"=>200)\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.deletedatas_rights-Tuple{String, Dict, Dict}","page":"Datas","title":"Nakala.Datas.deletedatas_rights","text":"deletedatas_rights(identifier::String, headers::Dict, body::Dict; apitest::Bool=false)\n\nSupprime des droits pour un utilisateur ou un groupe d'utilisateurs sur la donnée désignée par identifier.\n\nexemple\n\njulia> body = [ Dict( :id => userid, :role => \"ROLE_READER\" ) ]\n1-element Vector{Dict{Symbol, String}}:\n Dict(:id => \"c7e9bb15-6b4e-4e09-b234-ae7b13abcdef\", :role => \"ROLE_READER\")\n\njulia> Nakala.Datas.deletedatas_rights(identifier, headers, body, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"message\"=>\"1 right deleted\", \"code\"=>200)\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.deletedatas_uploads-Tuple{String, Dict}","page":"Datas","title":"Nakala.Datas.deletedatas_uploads","text":"deletedatas_uploads(fileIdentifier::String, headers::Dict; apitest::Bool=false)\n\nSupprimer le fichier fileIdentifier déposé dans l'espace temporaire.\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.downloaddatas_files-Tuple{String, String, Dict}","page":"Datas","title":"Nakala.Datas.downloaddatas_files","text":"downloaddatas_files(identifier::String, outputDir::String, header::Dict; apitest::Bool=false)\n\nTélécharge les fichiers déposés associés à la donnée désignée par identifier dans le répertoier outputDir.\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.getdatas-Tuple{String, Dict}","page":"Datas","title":"Nakala.Datas.getdatas","text":"getdatas(identifier::String, headers::Dict; apitest::Bool=false)\n\nRécupère les informations relatives à la donnée désignée par identifier.\n\nexemple\n\njulia> headers = Dict( \"X-API-KEY\" => \"01234567-89ab-cdef-0123\", :accept => \"application/json\" )\nDict{Any, String} with 2 entries:\n  :accept     => \"application/json\"\n  \"X-API-KEY\" => \"01234567-89ab-cdef-0123\"\n\njulia> Nakala.Datas.getdatas(\"10.34847/nkl.af219\", headers)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"isDepositor\"=>false, \"isOwner\"=>false, \"depositor\"=>Dict{String, Any}(\"name\"=>\"…,…\", \"photo\"=>nothing, \"surname\"=>\"…\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.getdatas_collections-Tuple{String, Dict}","page":"Datas","title":"Nakala.Datas.getdatas_collections","text":"getdatas_collections(identifier::String, headers::Dict; apitest::Bool=false)\n\nRécupère la liste des collections contenant la donnée désignée par identifier.\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.getdatas_files-Tuple{String, Dict}","page":"Datas","title":"Nakala.Datas.getdatas_files","text":"getdatas_files(identifier::String, headers::Dict; apitest::Bool=false)\n\nRécupère les métadonnées des fichiers associés à la donnée désignée par identifier.\n\nexemple\n\njulia> headers = Dict( \"X-API-KEY\" => apikey, :accept => \"application/json\" )\nDict{Any, String} with 2 entries:\n  :accept     => \"application/json\"\n  \"X-API-KEY\" => \"01234567-89ab-cdef-0123-456789\"\n\njulia> Nakala.Datas.getdatas_files(\"10.34847/nkl.ce37irra\", headers, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Any[Dict{String, Any}(\"name\"=>\"file.txt\", \"embargoed\"=>\"2024-09-01T00:00:00+02:00\", \"puid\"=>nothing, \"humanReadableEmbargoedDelay\"=>Any[], \"size\"=>\"13…\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.getdatas_metadatas-Tuple{String, Dict}","page":"Datas","title":"Nakala.Datas.getdatas_metadatas","text":"getdatas_metadatas(identifier::String, headers::Dict; apitest::Bool=false)\n\nRécupère la liste des métadonnées de la donnée désignée par identifier.\n\nexemple\n\njulia> headers = Dict( \"X-API-KEY\" => apikey, :accept => \"application/json\" )\nDict{Any, String} with 2 entries:\n  :accept     => \"application/json\"\n  \"X-API-KEY\" => \"01234567-89ab-cdef-0123-456789\"\n\njulia> Nakala.Datas.getdatas_metadatas(\"10.34847/nkl.e093t7t5\", headers, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Any[Dict{String, Any}(\"typeUri\"=>nothing, \"propertyUri\"=>\"http://nakala.fr/terms#title\", \"lang\"=>\"fr\", \"value\"=>\"Ma donnée\"), Dict{String, Any}(\"typeU…\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.getdatas_relations-Tuple{String, Dict}","page":"Datas","title":"Nakala.Datas.getdatas_relations","text":"getdatas_relations(identifier::String, headers::Dict; apitest::Bool=false)\n\nRécupère la liste des relations de la donnée désignée par identifier.\n\nexemple\n\njulia> Nakala.Datas.getdatas_relations(identifier, headers, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Any[]\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.getdatas_rights-Tuple{String, Dict}","page":"Datas","title":"Nakala.Datas.getdatas_rights","text":"getdatas_rights(identifier::String, headers::Dict; apitest::Bool=false)\n\nRécupère les groupes et les utilisateurs ayant des droits sur la donnée désignée par identifier.\n\nexemple\n\njulia> Nakala.Datas.getdatas_rights(identifier, headers, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Any[Dict{String, Any}(\"role\"=>\"ROLE_DEPOSITOR\", \"name\"=>\"Test Nakala\", \"photo\"=>\"http://mynakala.photo\", \"id\"=>\"26cef362-5bef-11eb-99d1-5254000a365d\",…\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.getdatas_status-Tuple{String, Dict}","page":"Datas","title":"Nakala.Datas.getdatas_status","text":"getdatas_status(identifier::String, headers::Dict; apitest::Bool=false)\n\nRécupère le statut de la donnée désignée par identifier.\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.getdatas_uploads-Tuple{Dict}","page":"Datas","title":"Nakala.Datas.getdatas_uploads","text":"getdatas_uploads(headers::Dict; apitest::Bool=false)\n\nRécupère la liste des objets fichiers déposés par un utilisateur non encore associés à une donnée.\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.getdatas_version-Tuple{String, Dict}","page":"Datas","title":"Nakala.Datas.getdatas_version","text":"getdatas_version(identifier::String, headers::Dict; apitest::Bool=false)\n\nRécupère la liste des versions de la donnée désignée par identifier.\n\nexemple\n\njulia> headers = Dict( \"X-API-KEY\" => \"123456789-abcdefghij\", :accept => \"application/json\" )\nDict{Any, String} with 2 entries:\n  :accept     => \"application/json\"\n  \"X-API-KEY\" => \"123456789-abcdefghij\"\n\njulia> Nakala.Datas.getdatas_version(\"10.34847/nkl.93aeeeee\", headers)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"currentPage\"=>1, \"lastPage\"=>1, \"total\"=>1, \"data\"=>Any[Dict{String, Any}(\"modDate\"=>\"2023-04-23T20:24:49+02:00\", \"versionIdentifie…\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.postdatas-Tuple{Dict, Dict}","page":"Datas","title":"Nakala.Datas.postdatas","text":"postdatas(headers::Dict, body::Dict; apitest::Bool=false)\n\nDépose une nouvelle donnée sur Nakala. Les métadonnées nécessaires à la création de la donnée sont déclarées dans le body.\n\nexemple\n\njulia> headers = Dict( \"X-API-KEY\" => \"01234567-89ab-cdef-0123\", :accept => \"application/json\" )\nDict{Any, String} with 2 entries:\n  :accept     => \"application/json\"\n  \"X-API-KEY\" => \"01234567-89ab-cdef-0123\"\n\njulia> body = Dict(\n  :collectionsIds => [],\n  :files => [ Dict(\"name\" => \"file.txt\", \"sha1\" => sha1, \"embargoed\" => \"2024-09-01\") ],\n  :status => \"pending\",\n  :metas => [\n    Dict(:value => \"Ma données\", :propertyUri => \"http://nakala.fr/terms#title\", :lang => \"fr\", :typeUri => \"http://www.w3.org/2001/XMLSchema#string\"),\n    Dict(:value => \"http://purl.org/coar/resource_type/c_18cf\", :propertyUri => \"http://nakala.fr/terms#type\", :typeUri => \"http://www.w3.org/2001/XMLSchema#anyURI\"),\n    Dict(:value => Dict(:surname => \"Rémi\", :givenname => \"Fassol\"), :propertyUri => \"http://nakala.fr/terms#creator\", :typeUri => \"http://www.w3.org/2001/XMLSchema#string\"),\n    Dict(:value => \"2024-09-01\", :propertyUri => \"http://nakala.fr/terms#created\", :typeUri => \"http://www.w3.org/2001/XMLSchema#string\"),\n    Dict(:value => \"PDM\", :propertyUri => \"http://nakala.fr/terms#license\", :typeUri => \"http://www.w3.org/2001/XMLSchema#string\"),\n    Dict(:value => \"Description\", :propertyUri => \"http://purl.org/dc/terms/description\", :lang => \"fr\", :typeUri => \"http://www.w3.org/2001/XMLSchema#string\"),\n    Dict( :value => Dict( :surname => \"Rémi\", :givenname => \"Fassol\" ), :propertyUri => \"http://nakala.fr/terms#creator\" )\n  ],\n  :rights => []\n)\n\njulia> Nakala.Datas.postdatas(headers, body, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"message\"=>\"Data created\", \"payload\"=>Dict{String, Any}(\"id\"=>\"10.34847/nkl.35b5\"), \"code\"=>201)\n  \"status\"    => 201\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.postdatas_collections-Tuple{String, Dict, Array}","page":"Datas","title":"Nakala.Datas.postdatas_collections","text":"postdatas_collections(identifier::String, headers::Dict, body::Array; apitest::Bool=false)\n\nAjoute la donnée désignée par identifier dans un ensemble de collections.\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.postdatas_files-Tuple{String, Dict, Dict}","page":"Datas","title":"Nakala.Datas.postdatas_files","text":"postdatas_files(identifier::String, headers::Dict, body::Dict; apitest::Bool=false)\n\nAjoute un fichier à la donnée désignée par identifier. Au préalable, le fichier doit avoir été déposé sur l'espace temporaire de Nakala (postdatas_uploads()) et vous devez disposer de son identifiant sha1, qui doit être indiqué dans le corps de la requête.\n\nexemple\n\njulia> headers = Dict( \"X-API-KEY\" => \"01234567-89ab-cdef-0123\", :accept => \"application/json\" )\nDict{Any, String} with 2 entries:\n  :accept     => \"application/json\"\n  \"X-API-KEY\" => \"01234567-89ab-cdef-0123\"\n\njulia> body = Dict( \"description\" => \"Greetings.\", \"sha1\" => sha1, \"embargoed\" => \"2024-09-01\" )\nDict{String, String} with 3 entries:\n  \"embargoed\"   => \"2024-09-01\"\n  \"sha1\"        => \"49aaa64346f03598951ad578\"\n  \"description\" => \"Greetings.\"\n\njulia> Nakala.Datas.postdatas_files(\"10.34847/nkl.c61ej8x9\", headers, body, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"message\"=>\"File added\", \"code\"=>200)\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.postdatas_metadatas-Tuple{String, Dict, Dict}","page":"Datas","title":"Nakala.Datas.postdatas_metadatas","text":"postdatas_metadatas(identifier::String, headers::Dict, body::Dict; apitest::Bool=false)\n\nAjoute des métadonnées à la donnée désignée par identifier.\n\nexemple\n\njulia> # ajout d'un titre en anglais\n\njulia> body = Dict( :value => \"My Data\", :propertyUri => \"http://nakala.fr/terms#title\", :lang => \"en\", :typeUri => \"http://www.w3.org/2001/XMLSchema#string\" )\nDict{Symbol, String} with 4 entries:\n  :value       => \"My Data\"\n  :propertyUri => \"http://nakala.fr/terms#title\"\n  :lang        => \"en\"\n  :typeUri     => \"http://www.w3.org/2001/XMLSchema#string\"\n\njulia> Nakala.Datas.deletedatas_metadatas(identifier, headers, body, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"message\"=>\"1\", \"code\"=>201)\n  \"status\"    => 201\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.postdatas_relations-Tuple{String, Dict, Array}","page":"Datas","title":"Nakala.Datas.postdatas_relations","text":"postdatas_relations(identifier::String, headers::Dict, body::Array; apitest::Bool=false)\n\nAjoute des relations à la donnée désignée par identifier. Pour ajouter des relations à une donnée, cette dernière doit être publiée.\n\nLe body est un tableau de dictionnaires. Plusieurs relations peuvent donc être ajoutées avec la même requête.\n\nexemple\n\njulia> body = [ Dict(:type => \"Cites\", :repository => \"hal\", :target => \"hal-02464318v1\", :comment => \"relation test\") ]\n1-element Vector{Dict{Symbol, String}}:\n Dict(:type => \"Cites\", :repository => \"hal\", :target => \"hal-02464318v1\", :comment => \"relation test\")\n\njulia> Nakala.Datas.postdatas_relations(identifier, headers, body, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"message\"=>\"1 relation added\", \"code\"=>200)\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.postdatas_rights-Tuple{String, Dict, Array}","page":"Datas","title":"Nakala.Datas.postdatas_rights","text":"postdatas_rights(identifier::String, headers::Dict, body::Array; apitest::Bool=false)\n\nAjoute des droits à la donnée désignée par identifier.\n\nexemple\n\njulia> body = [ Dict( :id => userid, :role => \"ROLE_READER\" ) ]\n1-element Vector{Dict{Symbol, String}}:\n Dict(:id => \"c7e9bb15-6b4e-4e09-b234-ae7b13abcdef\", :role => \"ROLE_READER\")\n\njulia> Nakala.Datas.postdatas_rights(identifier, headers, body, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"message\"=>\"1 right added\", \"code\"=>200)\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.postdatas_uploads-Tuple{String, Dict}","page":"Datas","title":"Nakala.Datas.postdatas_uploads","text":"postdatas_uploads(file::String, headers::Dict; apitest::Bool=false)\n\nDépose un fichier sur l'espace temporaire de Nakala.\n\nexemple\n\njulia> headers = Dict( \"X-API-KEY\" => \"01234567-89ab-cdef-0123\", :accept => \"application/json\" )\nDict{Any, String} with 2 entries:\n  :accept     => \"application/json\"\n  \"X-API-KEY\" => \"01234567-89ab-cdef-0123\"\n\njulia> Nakala.Datas.postdatas_uploads(\"path/to/file.txt\", headers, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"name\"=>\"file.txt\", \"sha1\"=>\"a0b65939670bc2c010f4d5d6a0b3e\")\n  \"status\"    => 201\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.putdatas-Tuple{String, Dict, Dict}","page":"Datas","title":"Nakala.Datas.putdatas","text":"putdatas(identifier::String, headers::Dict, body::Dict; apitest::Bool=false)\n\nModifie les informations de la donnée désignée par identifier.\n\nexemple\n\njulia> new_metadata = Dict(\n  \"metas\" => [\n    Dict(\"value\" => \"My data\", \"propertyUri\" => \"http://nakala.fr/terms#title\", \"lang\" => \"en\", \"typeUri\" => \"http://www.w3.org/2001/XMLSchema#string\"),\n    Dict(\"value\" => \"http://purl.org/coar/resource_type/c_18cf\", \"propertyUri\" => \"http://nakala.fr/terms#type\", \"typeUri\" => \"http://www.w3.org/2001/XMLSchema#anyURI\"),\n    Dict(:value => Dict(:surname => \"Rémi\", :givenname => \"Fassol\"), :propertyUri => \"http://nakala.fr/terms#creator\", :typeUri => \"http://www.w3.org/2001/XMLSchema#string\"),\n    Dict(\"value\" => \"2024-09-01\", \"propertyUri\" => \"http://nakala.fr/terms#created\", \"typeUri\" => \"http://www.w3.org/2001/XMLSchema#string\"),\n    Dict(\"value\" => \"PDM\", \"propertyUri\" => \"http://nakala.fr/terms#license\", \"typeUri\" => \"http://www.w3.org/2001/XMLSchema#string\"),\n    Dict(\"value\" => \"New description.\", \"propertyUri\" => \"http://purl.org/dc/terms/description\", \"lang\" => \"en\", \"typeUri\" => \"http://www.w3.org/2001/XMLSchema#string\")\n  ]\n)\nDict{String, Vector{Dict}} with 1 entry:\n\"metas\" => [Dict(\"typeUri\"=>\"http://www.w3.org/2001/XMLSchema#string\", \"propertyUri\"=>\"http://nakala.fr/terms#title\", \"lang\"=>\"en\", \"value\"=>\"My data\"), Dict(\"typeUr…\n\njulia> Nakala.Datas.putdatas(\"10.34847/nkl.83409aze\", headers, new_metadata, apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => \"\"\n  \"status\"    => 204\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.putdatas_collections-Tuple{String, Dict, Array}","page":"Datas","title":"Nakala.Datas.putdatas_collections","text":"putdatas_collections(identifier::String, headers::Dict, body::Array; apitest::Bool=false)\n\nRemplace l'ensemble des collections auxquelles appartient la donnée désignée par identifier.\n\n\n\n\n\n","category":"method"},{"location":"modules/datas/#Nakala.Datas.putdatas_status-Tuple{String, String, Dict}","page":"Datas","title":"Nakala.Datas.putdatas_status","text":"putdatas_status(identifier::String, status::String, headers::Dict; apitest::Bool=false)\n\nChange le statut de la donnée désignée par ìdentifier.\n\n\n\n\n\n","category":"method"},{"location":"modules/vocabularies/#Vocabularies","page":"Vocabularies","title":"Vocabularies","text":"","category":"section"},{"location":"modules/vocabularies/","page":"Vocabularies","title":"Vocabularies","text":"Modules = [Nakala.Vocabularies]","category":"page"},{"location":"modules/vocabularies/#Nakala.Vocabularies.getvocabularies_collectionStatuses-Tuple{}","page":"Vocabularies","title":"Nakala.Vocabularies.getvocabularies_collectionStatuses","text":"getvocabularies_collectionStatuses(;apitest::Bool=false)\n\nRécupère les statuts des collections de Nakala.\n\nexemple\n\njulia> Nakala.getvocabularies_collectionStatuses(apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"public\"=>\"public collection\", \"private\"=>\"private collection\")\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/vocabularies/#Nakala.Vocabularies.getvocabularies_countryCodes-Tuple{Array}","page":"Vocabularies","title":"Nakala.Vocabularies.getvocabularies_countryCodes","text":"getvocabularies_countryCodes(params::Array; apitest::Bool=false)\n\nRécupère les codes pays ISO 3166 (alpha-2).\n\nexemple\n\njulia> Nakala.getvocabularies_countryCodes([:q => \"fr\"], apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Any[Dict{String, Any}(\"label\"=>\"Central African Republic (the)\", \"id\"=>\"CF\"), Dict{String, Any}(\"label\"=>\"France\", \"id\"=>\"FR\"), Dict{String, Any}(\"lab…\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/vocabularies/#Nakala.Vocabularies.getvocabularies_dataStatuses-Tuple{}","page":"Vocabularies","title":"Nakala.Vocabularies.getvocabularies_dataStatuses","text":"getvocabularies_dataStatuses(;apitest::Bool=false)\n\nRécupère les statuts des données de Nakala.\n\nexemple\n\njulia> Nakala.getvocabularies_dataStatuses(apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Dict{String, Any}(\"pending\"=>\"pending data\", \"moderated\"=>\"moderated data\", \"deleted\"=>\"deleted data\", \"old\"=>\"old version\", \"published\"=>\"published d…\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/vocabularies/#Nakala.Vocabularies.getvocabularies_datatypes-Tuple{}","page":"Vocabularies","title":"Nakala.Vocabularies.getvocabularies_datatypes","text":"getvocabularies_datatypes(;apitest::Bool=false)\n\nRécupère les types des données de Nakala.\n\nexemple\n\njulia> Nakala.getvocabularies_datatypes(apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Any[\"http://purl.org/coar/resource_type/c_c513\", \"http://purl.org/coar/resource_type/c_12ce\", \"http://purl.org/coar/resource_type/c_18cc\", \"http://pur…\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/vocabularies/#Nakala.Vocabularies.getvocabularies_dcmitypes-Tuple{}","page":"Vocabularies","title":"Nakala.Vocabularies.getvocabularies_dcmitypes","text":"getvocabularies_dcmitypes(;apitest::Bool=false)\n\nRécupère les types DCMI.\n\nexemple\n\njulia> Nakala.getvocabularies_dcmitypes(apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Any[\"http://purl.org/dc/dcmitype/Collection\", \"http://purl.org/dc/dcmitype/Dataset\", \"http://purl.org/dc/dcmitype/Event\", \"http://purl.org/dc/dcmitype…\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/vocabularies/#Nakala.Vocabularies.getvocabularies_languages-Tuple{Array}","page":"Vocabularies","title":"Nakala.Vocabularies.getvocabularies_languages","text":"getvocabularies_languages(params::Array; apitest::Bool=false)\n\nRécupère les langues des métadonnées.\n\nexemple\n\njulia> Nakala.getvocabularies_languages([:code => \"fr\"], apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Any[Dict{String, Any}(\"label\"=>\"French\", \"id\"=>\"fr\")]\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/vocabularies/#Nakala.Vocabularies.getvocabularies_licenses-Tuple{Array}","page":"Vocabularies","title":"Nakala.Vocabularies.getvocabularies_licenses","text":"getvocabularies_licenses(params::Array; apitest::Bool=false)\n\nRécupère les licences des données de Nakala.\n\nexemple\n\njulia> Nakala.Vocabularies.getvocabularies_licenses([\"q\" => \"public\"], apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Any[Dict{String, Any}(\"name\"=>\"Affero General Public License v1.0\", \"code\"=>\"AGPL-1.0\", \"url\"=>\"https://spdx.org/licenses/AGPL-1.0.html#licenseText\"),…\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/vocabularies/#Nakala.Vocabularies.getvocabularies_metadatatypes-Tuple{}","page":"Vocabularies","title":"Nakala.Vocabularies.getvocabularies_metadatatypes","text":"getvocabularies_metadatatypes(;apitest::Bool=false)\n\nRécupère les types des métadonnées.\n\nexemple\n\njulia> Nakala.getvocabularies_metadatatypes(apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Any[\"http://purl.org/dc/terms/Box\", \"http://purl.org/dc/terms/ISO3166\", \"http://purl.org/dc/terms/Period\", \"http://purl.org/dc/terms/Point\", \"http://p…\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"},{"location":"modules/vocabularies/#Nakala.Vocabularies.getvocabularies_properties-Tuple{}","page":"Vocabularies","title":"Nakala.Vocabularies.getvocabularies_properties","text":"getvocabularies_properties(;apitest::Bool=false)\n\nRécupère les propriétés des métadonnées.\n\nexemple\n\njulia> Nakala.getvocabularies_properties(apitest=true)\nDict{String, Any} with 3 entries:\n  \"body\"      => Any[\"http://nakala.fr/terms#title\", \"http://nakala.fr/terms#creator\", \"http://nakala.fr/terms#created\", \"http://nakala.fr/terms#license\", \"http://naka…\n  \"status\"    => 200\n  \"isSuccess\" => true\n\n\n\n\n\n","category":"method"}]
}
